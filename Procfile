ShareDiskMovieSearchBot/ ├── config.py │ import os │ from os import environ │ import re │
│ # Utility functions │ id_pattern = re.compile(r'^-?\d+$') # Fixed to handle negative integers for channel IDs │
│ def is_enabled(value, default): │ if value.lower() in ["true", "yes", "1", "enable", "y"]: │ return True │ elif value.lower() in ["false", "no", "0", "disable", "n"]: │ return False │ else: │ return default │
│ # Bot Information (with validation) │ API_ID = environ.get('API_ID', '26954495') │ API_HASH = environ.get('API_HASH', '2061c55207cfee4f106ff0dc331fe3d9') │ BOT_TOKEN = environ.get('BOT_TOKEN', "") │ SESSION = environ.get('SESSION', 'Deendayal_search') │
│ # Validate required environment variables │ if not API_ID or not API_HASH or not BOT_TOKEN: │ raise ValueError("API_ID, API_HASH, and BOT_TOKEN must be set in the environment variables.") │
│ # Bot Settings │ CACHE_TIME = int(environ.get('CACHE_TIME', 300)) │ USE_CAPTION_FILTER = bool(environ.get('USE_CAPTION_FILTER', True)) │
│ # Admin, Channels & Users │ ADMINS = [int(admin) if id_pattern.search(admin) else admin for admin in environ.get('ADMINS', '6285713858 7045947967').split()] │ DEENDAYAL_MOVIE_UPDATE_CHANNEL = int(environ.get('DEENDAYAL_MOVIE_UPDATE_CHANNEL', '-1002608186529')) │ AUTH_CHANNEL = [int(fch) if id_pattern.search(fch) else fch for fch in environ.get('AUTH_CHANNEL', '-100').split()] │
│ # Channel & Group Links │ GRP_LNK = environ.get('GRP_LNK', 'https://t.me/SDMOVIESPOINTEe') │ CHNL_LNK = environ.get('CHNL_LNK', 'https://t.me/pikashow_7') │ OWNER_LNK = environ.get('OWNER_LNK', 'https://t.me/Keshavraj_77') # Updated to @Keshavraj_77 │ DEENDAYAL_MOVIE_UPDATE_CHANNEL_LNK = environ.get('DEENDAYAL_MOVIE_UPDATE_CHANNEL_LNK', 'https://t.me/pikashow_7') │
│ # MongoDB Configuration │ DATABASE_URI = environ.get('DATABASE_URI', "mongodb+srv://nr385708:bs6GdimYoAzmHbRF@cluster0.xtpwl.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0") │ DATABASE_NAME = environ.get('DATABASE_NAME', "cluster") │ COLLECTION_NAME = environ.get('COLLECTION_NAME', 'Deendayal_files') │
│ # Validate MongoDB URI │ if not DATABASE_URI: │ raise ValueError("DATABASE_URI must be set in the environment variables.") │
│ # Miscellaneous │ CUSTOM_FILE_CAPTION = environ.get("CUSTOM_FILE_CAPTION", "📽️ {file_name}\n\n💾 Size: {file_size}") │
├── database.py │ from pymongo import MongoClient │ from config import DATABASE_URI, DATABASE_NAME, COLLECTION_NAME │
│ # Initialize MongoDB client │ client = MongoClient(DATABASE_URI, serverSelectionTimeoutMS=5000) │ db = client[DATABASE_NAME] │ collection = db[COLLECTION_NAME] │
│ def find_movie(query): │ """Search for a movie in the database by title.""" │ try: │ return collection.find_one({"title": {"$regex": query, "$options": "i"}}) │ except Exception as e: │ print(f"Error finding movie: {e}") │ return None │
│ def insert_movie(movie_data): │ """Insert a movie into the database (for setup purposes).""" │ try: │ collection.insert_one(movie_data) │ print(f"Inserted movie: {movie_data['title']}") │ except Exception as e: │ print(f"Error inserting movie: {e}") │
│ def close_connection(): │ """Close the MongoDB connection.""" │ client.close() │ print("MongoDB connection closed.") │
├── handlers/start_handler.py │ from pyrogram import filters │ from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton │ from config import CHNL_LNK, GRP_LNK │
│ def register_start_handler(app): │ @app.on_message(filters.command("start")) │ async def start(client, message): │ welcome_text = ( │ "HEY! OWNER 😍,\n\n" │ "ME! SHAREDISK MOVIE SEARCH BOT 🤖\n\n" │ "I CAN SEARCH MOVIES FOR YOU. 🔍\n\n" │ "MADE WITH ❤️ BY @Keshavraj_77" │ ) │ buttons = InlineKeyboardMarkup( │ [ │ [ │ InlineKeyboardButton("OUR CHANNEL", url=CHNL_LNK), │ InlineKeyboardButton("OUR GROUP", url=GRP_LNK), │ ], │ [ │ InlineKeyboardButton("About", callback_data="about"), │ InlineKeyboardButton("Help", callback_data="help"), │ ] │ ] │ ) │ await message.reply_text(welcome_text, reply_markup=buttons) │
├── handlers/search_handler.py │ from pyrogram import filters │ from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton │ from pyrogram.errors import UserNotParticipant │ from config import DEENDAYAL_MOVIE_UPDATE_CHANNEL, DEENDAYAL_MOVIE_UPDATE_CHANNEL_LNK │
│ def register_search_handler(app): │ @app.on_message(filters.text & ~filters.command(["start"])) │ async def search_movie(client, message): │ user_id = message.from_user.id │ movie_query = message.text.strip() │
│ # Check if the user has joined the update channel │ try: │ await client.get_chat_member(DEENDAYAL_MOVIE_UPDATE_CHANNEL, user_id) │ except UserNotParticipant: │ # Prompt user to join the update channel │ join_text = ( │ "HEY! OWNER 😊\n\n" │ "YOU HAVE TO JOIN OUR UPDATES CHANNEL TO USE ME ✅\n\n" │ "CLICK BELLOW BUTTON TO JOIN NOW. 👇" │ ) │ buttons = InlineKeyboardMarkup( │ [ │ [ │ InlineKeyboardButton("🍿 UPDATES CHANNEL 🍿", url=DEENDAYAL_MOVIE_UPDATE_CHANNEL_LNK) │ ] │ ] │ ) │ await message.reply_text(join_text, reply_markup=buttons) │ return │ except Exception as e: │ # Handle other potential errors (e.g., bot not being an admin in the channel) │ await message.reply_text(f"Error checking channel membership: {str(e)}\nPlease contact @Keshavraj_77 for assistance.") │ return │
│ # If the user has joined, provide a clickable link to search for the movie │ search_text = ( │ f"CLICK HERE 👇 FOR "{movie_query}"" │ ) │ buttons = InlineKeyboardMarkup( │ [ │ [ │ InlineKeyboardButton(f"🍿 {movie_query.upper()} 🍿\nCLICK ME FOR RESULTS", callback_data=f"search:{movie_query}"), │ ], │ [ │ InlineKeyboardButton("? HOW TO OPEN LINK ?", callback_data="how_to_open"), │ InlineKeyboardButton("👈 SEARCH HERE 👈", callback_data="search_here"), │ ] │ ] │ ) │ await message.reply_text(search_text, reply_markup=buttons) │
├── handlers/callback_handler.py │ from pyrogram import filters │ from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton │ from database import find_movie │
│ def register_callback_handler(app): │ @app.on_callback_query() │ async def callback_query(client, callback_query): │ data = callback_query.data │
│ if data.startswith("search:"): │ movie_query = data.split(":", 1)[1] │ movie = find_movie(movie_query) │
│ if movie: │ # Format the movie details with download links │ result_text = ( │ f"{movie['title'].upper()} ({movie['year']}) 🍿\n\n" │ f"ORIGINAL {movie['language'].upper()} DUBBED 🎙️\n\n" │ f"ORIGINAL PRINT 📼\n\n" │ f"480P - {movie['links']['480p']}\n\n" │ f"720P - {movie['links']['720p']}\n\n" │ f"1080P - {movie['links']['1080p']}\n\n" │ f"UPLOADED BY @DUKAN_KA_SAMAN" │ ) │ buttons = InlineKeyboardMarkup( │ [ │ [ │ InlineKeyboardButton("WRONG LAYOUT?", callback_data="wrong_layout") │ ] │ ] │ ) │ await callback_query.message.edit_text(result_text, reply_markup=buttons) │ else: │ await callback_query.message.edit_text("Movie not found in the database. Please try a different title or contact @Keshavraj_77 for assistance.") │
│ elif data == "how_to_open": │ await callback_query.message.edit_text("To open the link, simply click on the resolution link (e.g., 480P, 720P, 1080P) to download or stream the movie.") │ elif data == "search_here": │ await callback_query.message.edit_text("Please type the movie name again to search.") │ elif data == "wrong_layout": │ await callback_query.message.edit_text("If the layout is wrong, please contact the bot owner @Keshavraj_77 for assistance.") │
├── main.py │ from pyrogram import Client │ from config import API_ID, API_HASH, BOT_TOKEN, SESSION │ from handlers.start_handler import register_start_handler │ from handlers.search_handler import register_search_handler │ from handlers.callback_handler import register_callback_handler │ from database import insert_movie, close_connection │
│ # Initialize the bot │ app = Client( │ SESSION, │ api_id=API_ID, │ api_hash=API_HASH, │ bot_token=BOT_TOKEN, │ workers=2, │ connection_timeout=30 │ ) │
│ # Register handlers │ register_start_handler(app) │ register_search_handler(app) │ register_callback_handler(app) │
│ # Insert sample movies into the database (for testing) │ sample_movies = [ │ { │ "title": "RRR", │ "year": 2022, │ "language": "Hindi", │ "links": { │ "480p": "https://gplinks.co/y8UZi", │ "720p": "https://gplinks.co/SB45BU", │ "1080p": "https://gplinks.co/A3H2" │ } │ }, │ { │ "title": "Come Play", │ "year": 2020, │ "language": "English", │ "links": { │ "480p": "https://example.com/comeplay_480p", │ "720p": "https://example.com/comeplay_720p", │ "1080p": "https://example.com/comeplay_1080p" │ } │ } │ ] │
│ for movie in sample_movies: │ insert_movie(movie) │
│ # Start the bot │ if name == "main": │ try: │ print("Bot is running...") │ app.run() │ finally: │ # Close the MongoDB connection when the bot stops │ close_connection() │
├── requirements.txt │ pyrogram==2.0.106 │ pymongo==4.6.1 │
├── README.md │ # ShareDisk Movie Search Bot │
│ A Telegram bot that allows users to search for movies and provides download links in various resolutions. Built using Pyrogram and MongoDB. │
│ ## Features │ - Welcome message with channel and group links. │ - Force-sub to an updates channel before searching. │ - Search for movies and get download links in 480p, 720p, and 1080p. │
│ ## Setup │ 1. Clone the repository: │ │ git clone https://github.com/yourusername/ShareDiskMovieSearchBot.git │ cd ShareDiskMovieSearchBot │ │ 2. Install dependencies: │ │ pip install -r requirements.txt │ │ 3. Set environment variables in config.py or via your environment: │ - API_ID: Your Telegram API ID. │ - API_HASH: Your Telegram API Hash. │ - BOT_TOKEN: Your Telegram Bot Token. │ - DATABASE_URI: Your MongoDB URI. │ 4. Run the bot: │ │ python main.py │ │
│ ## Usage │ - Start the bot with /start. │ - Search for a movie by typing its name (e.g., "RRR"). │ - Join the updates channel if prompted. │ - Click the search result button to get download links. │
└── Procfile worker: python3 main.py
